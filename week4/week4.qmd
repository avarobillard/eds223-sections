---
title: "week4"
format: html
---

```{r}
library(tidyverse)
library(spData)
library(spDataLarge)
library(sf)
library(stars)
library(terra)
```
## Load Data
```{r}
dem <- terra::rast(system.file("raster/dem.tif", package = "spDataLarge"))
landsat <- terra::rast(system.file("raster/landsat.tif", package = "spDataLarge"))
srtm <- terra::rast(system.file("raster/srtm.tif", package = "spDataLarge"))
```

## Explore data distribution
```{r}
# Create histogram of DEM
hist(dem,
     main = "Digital Elevation Model Distribution",
     xlab = "Value")
```
```{r}
# Create boxplot of DEM
boxplot(dem,
        main = "Digital Elevation Model Distribution",
        ylab = "Value")
```

## Explore elevation at Mt. Mongon, Peru
```{r}
# Reclassify dem and compute mean
rcl <- matrix(c(-Inf, 300, 1,
                300, 500, 2,
                500, Inf, 3),
              ncol = 3, byrow = TRUE)

dem_reclass <- classify(dem, rcl = rcl)

# Apply matrix to reclassify raster, making cells 1, 2, or 3
values(dem_reclass) <- as.factor(values(dem_reclass))

# Assign labels to numerical categories
levels(dem_reclass) <- tibble::tibble(id = 1:3,
                                      cats = c("low", "medium", "high"))

# Calculate mean elevation for each category- using original DEM values
elevation_mean <- zonal(dem, dem_reclass, fun = "mean") %>% 
  kable(col.names = c("Elevation Zone", "Mean elevation (m)")) %>% 
  kable_styling(bootstrap_options = "striped")
elevation_mean

# Map reclassification
map2 <- tm_shape(reclassified) +
  tm_raster(col.legend = tm_legend(title = "Elevation (m)"))+
  tm_title(text = "Mt. Mongon, Peru Elevation Classes")

map2
```
## Explore NDVI and NDWI at Zion National Park
```{r}
# Apply scale factor and offset for all Landsat grid cells
scale_factor <- 0.0001
offset <- 0

scale_function <- function(x) {
  x * scale_factor + offset
}

# Apply scale function to all landsat layers
landsat_scaled <- app(landsat, fun = scale_function)
```

```{r}
# Calculate NDVI 
ndvi_function <- function(nir, red) {
  (nir - red) / (nir + red)
}

# Apply function to layers 4 and 3
ndvi_rast <- lapp(landsat_scaled[[c(4,3)]], fun = ndvi_function)

# Visualize raster
plot(ndvi_rast,
     main = "Zion National Park NDVI")
```

```{r}
# Calculate NDWI 
ndwi_function <- function(green, nir) {
  (green - nir) / (green + nir)
}

# Apply function to layers 2 and 4
ndwi_rast <- lapp(landsat_scaled[[c(2,4)]], fun = ndwi_function)

# Visualize raster
plot(ndwi_rast,
     main = "Zion National Park NDWI")
```
```{r}
# Combine rasters and visualize
combine <- c(ndvi_rast, ndwi_rast)

plot(combine, main = c("NDVI", "NDWI"))
```
```{r}
# Calculate correlation between raster layers
terra::layerCor(combine, fun = cor)
```

4. Change resolution of elevation at Zion National Park
```{r}
plot(srtm)
```
```{r}
# Create empty template based on extent of srtm
rast_template <- terra::rast(terra::ext(srtm), res = 0.01)

# Resampling methods
srtm_resample1 <- terra::resample(srtm, y = rast_template, method = 'bilinear')
srtm_resample2 <- terra::resample(srtm, y = rast_template, method = "near")
srtm_resample3 <- terra::resample(srtm, y = rast_template, method = "cubic")
srtm_resample4 <- terra::resample(srtm, y = rast_template, method = "cubicspline")
srtm_resample5 <- terra::resample(srtm, y = rast_template, method = "lanczos")
```

```{r}
srtm_resample_all <- c(srtm_resample1, srtm_resample2, srtm_resample3, srtm_resample4, srtm_resample5)
labs <- c("Bilinear", "Near", "Cubic", "Cubic Spline", "Lanczos")

plot(srtm_resample_all, main = labs)
```

