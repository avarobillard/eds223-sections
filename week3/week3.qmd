---
title: "Week 3: Practice Vector Operations"
format: html
execute: 
  message: FALSE
  warning: FALSE
---

```{r}
library(here)
library(tidyverse)
library(sf)
library(tmap)
```

```{r}
# Read in data
sb_protected_areas <- st_read(here("data", "birds", "cpad_super_units_sb.shp")) |>  
  st_transform("ESRI:102009")

sb_city_boundaries <- st_read(here("data", "birds", "sb_city_boundaries_2003.shp")) |> 
  st_transform("ESRI:102009")

sb_county_boundary <- st_read(here("data", "birds", "sb_county_boundary_2020.shp")) |> 
  st_transform("ESRI:102009")

aves <- st_read(here("data", "birds", "aves_observations_2020_2024.shp")) |> 
  st_transform("ESRI:102009")
```

Find bird observations within protected areas in Santa Barbara County
```{r}
# Filter to bird points that fall within protected areas- reduces # of rows
aves_pa_subset <- aves[sb_protected_areas, ]

nrow(aves_pa_subset)
```
```{r}
# Map bird observations in protected areas
tm_shape(sb_county_boundary) +
  tm_fill() +
  tm_shape(sb_protected_areas) +
    tm_borders(lwd = 1, col = "#fb8500") +
    tm_fill(col = "#fb8500", alpha = 0.2) +
  tm_shape(aves_pa_subset) +
    tm_dots(col = "#023047")
```

```{r}
# Spatial join to add protected area to bird data if spatial match- still same # of rows!
aves_pa_join <- st_join(aves, sb_protected_areas) 
```

```{r}
# Map spatial join data 
tm_shape(sb_county_boundary) +
  tm_fill() +
  tm_shape(sb_protected_areas) +
    tm_borders(lwd = 1, col = "#fb8500") +
    tm_fill(col = "#fb8500", alpha = 0.2) +
  tm_shape(aves_pa_join) +
    tm_dots(col = "#023047")
```

```{r}
# Check if units are in meters
st_crs(sb_protected_areas)$units

# Make 5km buffer around protected areas and re subset
protected_buffer <- st_buffer(sb_protected_areas, dist = 5000)

# Get 289 rows instead of 103!
aves_pa_buffer <- aves[protected_buffer, ]
```

```{r}
# Map results
tm_shape(sb_county_boundary) +
  tm_fill() +
  tm_shape(sb_protected_areas) +
    tm_borders(lwd = 1, col = "#fb8500") +
    tm_fill(col = "#fb8500", alpha = 0.2) +
  tm_shape(aves_pa_buffer) +
  tm_dots(col = "#023047")
```

Find protected areas within 15km of Goleta
```{r}
# Filter to Goleta, spatial join to buffered protected areas
goleta <- sb_city_boundaries %>% 
  dplyr::filter(NAME == "Goleta")

# Create buffer around Goleta
goleta_buffer_15km <- st_buffer(goleta, dist = 15000)
```

```{r}
# St_within tests whether sb protected areas are within goleta buffer- creates sgbp
goleta_PAs_within <- st_within(sb_protected_areas, goleta_buffer_15km)

# St_intersects tests whether objects intersect- creates sgbp
goleta_PAs_intersect <- st_intersects(sb_protected_areas, goleta_buffer_15km)

# St_intersection creates polygon of the area shared by protected areas and goleta buffer
goleta_PAs_intersection <- st_intersection(sb_protected_areas, goleta_buffer_15km)
```
```{r}
# distance based join with st_is_within_distance tests whether objects intersect within a certain distance- adds Goleta as city if spatial match
goleta_PAs_join <- st_join(sb_protected_areas, goleta, st_is_within_distance, dist = 15000)
```

Find distance between Goleta and Dangermond Preserve
```{r}
# Subset PA to Dangermond Preserve
dangermond <- sb_protected_areas |>
  dplyr::filter(UNIT_NAME == "Jack and Laura Dangermond Preserve")
```

```{r}
# Shortest distance between edges of goleta and dangermond
danger_dist <- st_distance(goleta, dangermond) # Compute the distance between geometries edges
```

```{r}
# Calculate the geometric center
dangermond_centroid <- st_centroid(dangermond)
goleta_centroid <- st_centroid(goleta)

# Distance between centroids
danger_dist_centroid <- st_distance(goleta_centroid, dangermond_centroid) 
```

```{r}
# Check if the distance matrices are equal
danger_dist == danger_dist_centroid
```

